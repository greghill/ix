server
--
`Usage: ./server CPUS`
* `CPUS` = A comma separated list of the CPUs to use for handling traffic.

Listens to TCP socket 9876. It accepts all incoming connections. It sends back data unchanged as soon as they are received. Uses libevent.

server_mtcp
--
`Usage: ./server_mtcp CPUS`
* `CPUS` = A comma separated list of the CPUs to use for handling traffic.

Same as "server" but ported to use the mTCP user-mode TCP stack.

pingpongs
--
`Usage: ./pingpongs MSG_SIZE CPUS`
* `MSG_SIZE` = The message size to expect and send.
* `CPUS` = A comma separated list of the CPUs to use for handling traffic.

Listens to TCP socket 9876. It accepts all incoming connections. It waits for `MSG_SIZE` bytes of data that are kept in a buffer. When it has received `MSG_SIZE` bytes of data, it writes them back.

pingpongs_mtcp
--
`Usage: ./pingpongs MSG_SIZE CPUS`
* `MSG_SIZE` = The message size to expect and send.
* `CPUS` = A comma separated list of the CPUs to use for handling traffic.

Same as "pingpongs" but ported to use the mTCP user-mode TCP stack.

client
--
`Usage: ./client IP PORT CORES CONNECTIONS MSG_SIZE MESSAGES_PER_CONNECTION`
* `IP` = Server IP address.
* `PORT` = Server TCP port.
* `CORES` = Number of threads to use. Each thread is tied to a CPU core by a `sched_setaffinity`.
* `CONNECTIONS` = Total number of target concurrent connections. The connections are balanced between threads/cores. This is a target value. Connections are opened and closed.
* `MSG_SIZE` = The size of the message to send. After sending the message, the client waits for receiving the same message before sending the next one.
* `MESSAGES_PER_CONNECTION` = The number of messages to send before closing and reopening the TCP connection.

The utility uses libevent to coordinate sockets. If a connection stalls for more than TIMEOUT_US (1 second), it is closed and reopened and the event is counted as a timeout. Every 1 second it reports the following data on stdout:

`total_connections total_messages active_connections timeouts_connect timeouts_recv rx_bytes rx_packets tx_bytes tx_packets 0 error_summary`

* `total_connections` = the number of connections performed from the beginning of execution across all threads/cores.
* `total_messages` = the number of messages sent and received.
* `active_connections` = the instantaneous number of active connections.
* `timeouts_connect` = the number of timeouts that occurred while waiting to connect.
* `timeouts_recv` = the number of timeouts that occurred while waiting for data.
* `rx_bytes` = the number of bytes received by the network interface of the client as reported by /proc/net/dev.
* `rx_packets` = the number of packets received.
* `tx_bytes` = the number of bytes transmitted.
* `tx_packets` = the number of packets transmitted.
* `error_summary` = triplets <source, errno, count>

simple_client
--
`Usage: ./simple_client IP PORT THREADS CONNECTIONS_PER_THREAD MSG_SIZE MESSAGES_PER_CONNECTION`
* `IP` = Server IP address.
* `PORT` = Server TCP port.
* `THREADS` = Number of threads to use. Threads are not tied to cores.
* `CONNECTIONS_PER_THREAD` = Total number of connections to open per thread.
* `MSG_SIZE` = The size of the message to send. After sending the message, the client waits for receiving the same message before sending the next one.
* `MESSAGES_PER_CONNECTION` = The number of messages to send before closing and reopening the TCP connection.

The utility does NOT uses libevent. Each thread handles its sockets in a serial fashion:
1. It connects all sockets.
2. For each socket:
 * It sends the message.
 * It waits to receive the echo reply.
3. Repeat step 2 `MESSAGES_PER_CONNECTION` times.
4. Go to step 1.

Every 1 second it reports the following data on stdout:

`total_connections total_messages 0 0 0 rx_bytes rx_packets tx_bytes tx_packets latency_99`

* `total_connections` = the number of connections performed from the beginning of execution across all threads.
* `total_messages` = the number of messages sent and received.
* `rx_bytes` = the number of bytes received by the network interface of the client as reported by /proc/net/dev.
* `rx_packets` = the number of packets received.
* `tx_bytes` = the number of bytes transmitted.
* `tx_packets` = the number of packets transmitted.
* `latency_99` = the top 99th percentile of the round-trip time to send and receive a message.

The output format is compatible with the output format of the `client` utility.

latency
--
`Usage: ./latency IP PORT PROBES_PER_CONNECTION INTERVAL_MS PERCENTILE...`
* `IP` = Server IP address.
* `PORT` = Server TCP port.
* `PROBES_PER_CONNECTION` = The number of probes before closing and reopening the TCP connection.
* `INTERVAL_MS` = The delay in ms between receiving a reply and sending the next probe.
* `PERCENTILE` = A space separated list of percentiles for which to report latency.`

Every 1 second it reports the following data on stdout:

`count_of_probes latency_us...`

* `count_of_probes` = the number of probes sent and received
* `latency_us` = a space separated list of latencies in us in correspondence with the PERCENTILE command line option

select_net.sh
--
```
Usage:
  ./select_net.sh none
  ./select_net.sh linux [single|bond]
  ./select_net.sh ix    [node0|node1|...]
```
Enables the specified network. Either Linux (single or bond) or IX (on specified numa node). Accepts a number of parameters from the environment:
* `BMOS_PATH`: Path to BMOS.
* `ALL_IFS`: All network interfaces that should be managed by this tool.
* `BOND`: The bond device.
* `BOND_SLAVES`: The bond slaves.
* `SINGLE_NIC`: The device to be enabled in Linux single mode.
* `IP`: The IP to assign in Linux single mode.
* `PAGE_COUNT_2MB`: The number of 2MB pages to allocate for IX mode.

Example: `BMOS_PATH=~/bmos sudo -E ./select_net.sh none`

launch.py
--
```
usage: launch.py [-h] --clients CLIENTS --client-cmdline CLIENT_CMDLINE
                 [--debug] [--time TIME] [--user USER]

optional arguments:
  -h, --help            show this help message and exit
  --clients CLIENTS     comma-separated list of hostnames
  --client-cmdline CLIENT_CMDLINE
                        the command line to execute at each client
  --debug               enable debug log
  --time TIME           time of benchmark execution in seconds
  --user USER           SSH username for connecting to the clients
```
This tool can execute the `client` or `simple_client` tool on a number of remote hosts. It coordinates execution, gathers data for the specified amount of time and reports the messages per second sent and received by all clients.
